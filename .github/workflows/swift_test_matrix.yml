name: Matrix

on:
  workflow_call:
    inputs:
      name:
        type: string
        description: "The name of the workflow used for the concurrency group."
        required: true
      matrix_path:
        type: string
        description: "The path of the test matrix definition."
        default: ""
      matrix_string:
        type: string
        description: "The test matrix definition."
        default: ""

# We will cancel previously triggered workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.name }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    name: Prepare matrices
    runs-on: ubuntu-latest
    outputs:
      swift-matrix: ${{ steps.load-matrix.outputs.swift-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Mark the workspace as safe
        # https://github.com/actions/checkout/issues/766
        run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - id: load-matrix
        run: |
          if [ -n '${{ inputs.matrix_string }}' ]; then
            printf "swift-matrix=%s" "$(echo '${{ inputs.matrix_string }}' | jq -c '.')" >> "$GITHUB_OUTPUT"
          else
            printf "swift-matrix=%s" "$(jq -c '.' ${{ inputs.matrix_path }})" >> "$GITHUB_OUTPUT"
          fi

  execute-matrix:
    name: ${{ matrix.swift.platform }} (${{ matrix.swift.name }})
    needs: generate-matrix
    runs-on: ${{ matrix.swift.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.swift-matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: true
      - name: Pull Docker image
        run: docker pull ${{ matrix.swift.image }}
      - name: Run matrix job
        if: ${{ matrix.swift.platform != 'Windows' }}
        run: |
          if [[ -n "${{ matrix.swift.setup_command }}" ]]; then
            setup_command_expression="${{ matrix.swift.setup_command }} &&"
          else
            setup_command_expression=""
          fi
          workspace="/$(basename ${{ github.workspace }})"
          docker run -v ${{ github.workspace }}:"$workspace" \
            -w "$workspace" \
            -e SWIFT_VERSION="${{ matrix.swift.swift_version }}" \
            -e setup_command_expression="$setup_command_expression" \
            -e workspace="$workspace" \
            ${{ matrix.swift.image }} \
            bash -c "swift --version && git config --global --add safe.directory \"$workspace\" && $setup_command_expression ${{ matrix.swift.command }} ${{ matrix.swift.command_arguments }}"
      - name: Run matrix job (Windows)
        if: ${{ matrix.swift.platform == 'Windows' }}
        run: |
          if (-not [string]::IsNullOrEmpty("${{ matrix.swift.setup_command }}")) {
              $setup_command_expression = "${{ matrix.swift.setup_command }} &"
          } else {
              $setup_command_expression = ""
          }
          $workspace = "C:\" + (Split-Path ${{ github.workspace }} -Leaf)
          docker run -v ${{ github.workspace }}:$($workspace) `
            -w $($workspace) `
            -e SWIFT_VERSION="${{ matrix.swift.swift_version }}" `
            -e setup_command_expression=%setup_command_expression% `
            ${{ matrix.swift.image }} `
            cmd /s /c  "swift --version & powershell Invoke-Expression ""$($setup_command_expression) ${{ matrix.swift.command }} ${{ matrix.swift.command_arguments }}"""
    env:
      SWIFT_VERSION: ${{ matrix.swift.swift_version }}
